
Os recentes avanços na ciência de computadores
implicações do projeto orientado de domínio no valor de estimativa de software complexas e manutenção da plataforma usando DSL
Nikola Vlahovic

Abstract-a introdução do design orientado por domínio (DDD)
como uma abordagem alternativa ao desenvolvimento de software tinha a promessa de alcançar vários benefícios no processo de criação de complexos aplicativos de negócios específicos do domínio. Devido ao foco desta abordagem para o núcleo da aplicação funcionalidade aprimorada, colaboração com especialistas em domínio e modelagem conceitual benefícios, tem atraído um montante razoável de atenção da comunidade de programação na última década. Os benefícios acima referidos também têm sido capazes de criar conjunto exclusivo de ambientes de programação e as línguas que também mover os limites da eficiência da execução remota de código e a manutenção do aplicativo.
Neste artigo iremos apresentar e analisar uma dessas ferramentas, nomeadamente, plataforma de DSL. Plataforma de DSL é um serviço que permite a concepção, criação e manutenção de aplicações de negócio. O objetivo deste artigo é analisar as implicações do uso do DDD através da plataforma DSL sobre vários aspectos importantes do gerenciamento de software.
Vamos nos concentrar principalmente sobre a estimativa de software complexo valor do sistema e software de refatoração e esforço de manutenção com base nos modelos propostos por Groot et al .
Vamos mostrar que para sistemas de software complexo composto de uma série de componentes diferentes paradigmas de programação e sistemas de banco de dados pode ser extremamente benéfico para esta abordagem. Alguns dos benefícios mais importantes dizem respeito à redução dos custos de manutenção de software e transcender as propriedades de aplicativos e bancos de dados de negócios confiável desenvolvidos usando sistemas herdados para os sistemas de corrente usando o modelo de domínio subjacente.

Palavras-chave - Desenvolvimento de Software, o valor do software, manutenção de software, design orientado por domínio, Engenharia de Software, Software refactoring, sistemas legados.

I. INTRODUÇÃO
aqui é razoavelmente limitado número de documentos é Tscientific atual literatura pertinente a diferentes especificidades de
gestão e práticas de desenvolvimento de software, tais como o modelo de preços de software práticas ou a adopção de novas abordagens de desenvolvimento de software. Só nos últimos anos visões gerais de alguns destes aspectos do gerenciamento de software têm sido estudadas e novos modelos foram propostos. Ao mesmo tempo os praticantes são o desenvolvimento e apresentação de novas estruturas e tecnologias bem como novas abordagens de desenvolvimento de software totalmente. Apenas um número limitado de
N. Vlahovic é o professor associado do Departamento de Informática da Faculdade de Economia e Negócios da Universidade de Zagreb na Croácia. Trg. J. F.
Kennedyja 6, 10000 Zagreb, Croácia (telefone: +385-1-238 3220; fax: +385-1- 233 5633; e-mail: nvlahovic@ efzg.hr).
ISBN: 978-1-61804-320-7219
desenvolvimentos introduza a adoção mainstream por software ou mesmo empresas de software.
Um tal fenômeno é a abordagem de desenvolvimento de software chamado de design orientado para o domínio. Esta abordagem procura oferecer soluções para colmatar o fosso entre os especialistas em negócios e especialistas de software que é principal desvantagem em abordagens tradicionais que diminui a taxa de sucesso de muitos projetos de software. As metodologias ágeis são mais bem sucedidos em lidar com esta lacuna para razoavelmente limitado e sistemas de software de pequena escala. Quando se trata de sistemas complexos de negócios apenas abordagens com princípios tradicionais do núcleo estão disponíveis, principalmente com o aumento da ineficiência e desenvolvimento adicional e os custos de manutenção.
Design orientado para o domínio é portanto dedicado de melhorar o desenvolvimento e a manutenção de sistemas complexos de negócios de eficiência energética. Ao mesmo tempo em que oferece grandes vantagens para este tipo de sistemas de software e melhorias adicionais em vários aspectos da gestão de software, ele ainda enfrenta obstáculos significativos para adopção.
Neste artigo iremos explicar e apresentar os principais conceitos de design orientado para o domínio como uma adequada abordagem de desenvolvimento de software para sistemas complexos de negócios. A implementação destas prestações será dado através de descrição de uma implementação específica da abordagem, uma ferramenta de desenvolvimento de software chamada de DSL plataforma. Os benefícios podem ser avaliados criticamente através de diferentes problemas de gerenciamento de software e neste documento iremos nos concentrar na estimativa do valor de ativos de software e manutenção desses activos.
O objetivo deste trabalho é investigar possíveis criticamente benefícios da adopção de design orientado para o domínio de gerenciamento de software, com especial ênfase na fase de manutenção durante a produção de ativos de software. Inevitavelmente estas considerações irá reflectir sobre o valor do ativo de software e assim uma abordagem validada estimativa de ativos de software é chamado para. Aqui nós vamos construir sobre uma proposta de modelo de avaliação de software proposto por [2].
A estrutura deste documento é a seguinte: na secção II vamos descrever as principais características de design orientado para o domínio, suas vantagens e desvantagens, bem como a aplicação de seus conceitos em uma ferramenta chamada de DSL plataforma. Na seção III vamos dar uma olhada em algumas das mais importantes questões de gestão de software que podem ser afetadas pela abordagem de design orientado para o domínio, tais como o software de problemas de manutenção de





software, gestão de riscos e avaliações de valor do software é por esta razão que estas metodologias para promover a participação de abordagens. Na secção IV iremos discutir os impactos possíveis usuários do sistema e os clientes durante as fases de criação de aplicação design orientado para o domínio no software do sistema. Também o processo de desenvolvimento pode retornar ao processo de desenvolvimento para o complexo acoplado heterogênea fases anteriores conforme exigido pela perspectiva atual dos sistemas ao longo de todo o ciclo de vida do processo de software e software de sistema e mesmo diferentes actividades de desenvolvimento de extrapolar os benefícios e os problemas que a gestão deve podem se sobrepor. Juntamente com a abordagem de sistemas programáveis podemos estar cientes quando a considerar a introdução de características de domínio impulsionado encontrar a abordagem comportamental no design do agente. Finalmente na secção V. conclusões será dado com uma base de engenharia de software [3], [4] bem como nas poucas orientações descrevendo os principais avanços DDD e DSL projeto orientado ao comportamento [5].
A plataforma pode fornecer para empresas usando o complexo 3) Intermediário e abordagens de transição. Esta classe de sistemas de software heterogêneos. abordagens ao desenvolvimento de software partilha algumas das características com as abordagens estruturadas e alguns dos II DESIGN orientado para o domínio E PLATAFORMA DSL as características com a abordagens comportamental. Estes
nesta seção discutimos o design orientado para o domínio como um tipo de metodologias representam a síntese da tradicional abordagem rígida de desenvolvimento de software, posição esta abordagem em uma estrutura e macios humanista de elementos do contexto mais amplo e comportamentais com base na nossa análise descrever uma ferramenta que se aproxima. Metodologias ágeis representam a maioria dos
implementos esses recursos na maneira mais coerente. Exemplo típico de uma abordagem de transição devido ao seu
design orientado para o domínio (DDD) é um software de desenvolvimento se esforçam para capturar os aspectos humanos da organização para todos os que em vez de organizar o software analiticamente as partes interessadas envolvidas, especialmente durante a análise e esforço de desenvolvimento e utilização de modelagem conceitual,, estágios de planejamento, mantendo a estrutura na programação e execução do projeto de ferramentas, ela tenta fazer implementações e fases [6], [1].
modelo completo do domínio do problema movendo o foco do esforço de desenvolvimento de distância a partir de ferramentas técnicas e de design orientado para o domínio (DDD) como um romance relativamente recente
metodologias utilizadas. A abordagem de desenvolvimento de software tenta alterar a tradicional
A maioria dos termos gerais abordagens de desenvolvimento de software o foco do projeto metodologias e ferramentas para o pode ser dividida em duas classes e core diametralmente contrastado do problema em questão. DDD vai mesmo além de uma classe de um intermediário que chama sobre alguns dos conceitos de determinada tecnologia ou metodologia, ou mesmo um quadro. É a
partir de qualquer uma das duas principais classes [1]: é uma forma de pensar e um conjunto de prioridades destinadas a
acelerar projetos de software que têm de lidar com
1) Classe de abordagens estruturadas. Este é um grupo de domínios complexos [7]. Como tal é muito perto de
metodologias de desenvolvimento de software comportamentais que são baseados em uma abordagens, mas como ele confia firmemente sobre as hierarquias de prioridades processo que reconhece fases distintas do software e conceitos típicos de abordagens estruturadas, ele pode ser o processo de desenvolvimento. Estas fases geralmente alinhar com considerada como uma abordagem de transição para desenvolvimento de software.
nomeadamente estágios do ciclo de vida de desenvolvimento de software ainda, ao contrário de metodologias ágeis que estão concentrados em um limitado (SDLC). Consoante o método específico de cada software de pequeno a médio porte projectos, DDD é principalmente fase pode ser associada com uma etapa de SDLC quer, em causa com o complexo e sistemas de software acoplado. Como planejamento, criação, teste ou a implantação do software é independente de plataforma é uma abordagem abrangente para o sistema. Algumas metodologias pode ter várias fases altamente acoplados sistemas que usam diferentes, mesmo incoerente, associado com um estágio do SDLC, e outros podem tecnologias e plataformas de produtos bem como do desenvolvimento têm uma fase abrangendo mais ou sobreposição com duas metodologias ou práticas.
Fases do SDLC. A principal característica do a fim de compreender como a DDD pode conectar todas as metodologias neste grupo é que cada fase deve ser variedades de conceitos em uma visão consistente e unificada que será concluída com alguns resultado final, um artefato de software, dê uma olhada em como as metodologias e quadros anterior antes da próxima fase do processo pode começar. Alguns dos projetos de software representam. A maioria deles tratar um software mais metodologias comuns que pertencem a este grupo são projeto como uma entidade que tem de ser descrito com o uso de um número de modelo de desenvolvimento de software de cachoeira, prototipagem de diferentes perspectivas. Uma vez que há uma grande quantidade de diferentes de desenvolvimento iterativo incremental incremental, partes interessadas envolvidas no desenvolvimento de qualquer software
2)
desenvolvimento, modelo em espiral Boehm, etc mas também objeto projeto, uma variedade de perspectivas financeiras é utilizado para promover a melhor
orientação abordagens. A comunicação e a compreensão entre as partes interessadas. Na
classe de abordagens comportamentais. Este grupo de prática UML (Unified Modeling Language) é usada principalmente metodologias depende da abordagem de sistemas programáveis que para representação estática e dinâmica destas perspectivas.
toma uma definição mais descontraído do processo de desenvolvimento. UML abrange todos os pareceres relevantes do sistema de software, abordagens comportamental ter uma visão holística do seu entorno e dependências usando três grupos de sistemas organizacionais e de natureza social do software dedicados Diagramas, Diagramas de estrutura, sistemas de diagramas comportamentais (tanto no desenvolvimento e fases de implantação). e diagramas de interação [8]. Inevitavelmente, diferentes perspectivas






pode não ser totalmente compatível e este pode apresentar um desafio para a equipe de desenvolvimento em continuidade com o desenvolvimento do projeto.
Ao contrário da UML que leva sobre um certo número de perspectivas do modelo, DDD tenta descrever o modelo descrevendo sua
Fig. 1
modelo e perspectivas do
domínio do modelo como um todo e modelo completo (Figura 1). Desta forma, modelo si representa o sistema sendo desenvolvido.
Conseqüentemente, código de programação é a representação da Fig. 2 Plataforma de DSL O conceito de modelo. Inadequado, dependente de plataforma técnica manter bancos de dados. Valor Verdadeiro da abordagem DDD se torna o código de programação causaria efeito de bloqueio para a diversidade de aparente durante a manutenção e evolução do sistema.
tecnologias, metodologias de plataformas, bem como um número de quaisquer alterações feitas ao modelo de negócio são automaticamente partes interessadas, especialmente os especialistas em negócios com ausência de programação traduzido pela plataforma em código de cliente ou bases de dados (como habilidades. mostrado na Figura 2). Esta funcionalidade alivia os programadores" a fim de não evitar estes efeitos de lock-out esforços específicos e desloca o foco de seu trabalho para requisitos específicos são esperados a partir da equipa funcionalidades de comunicação e a experiência do usuário em vez de instalações de código. Em primeiro lugar um domínio idioma específico (DSL) é necessário otimização, refatoração ou tarefas técnicas semelhantes. Da mesma forma para descrever o modelo do projeto de software e em segundo lugar a manutenção ou mesmo a migração de dados para o idioma para equipe ubíqua subjacentes a comunicação deve ser utilizado o sistema de banco de dados também é altamente automatizada.
e evoluiu durante o desenvolvimento do projeto. Dois desafios principais que consistente pode ser eficazmente resolvidos utilizando a comunicação entre especialistas em domínio de negócios e Plataforma de DSL e DDD é a abordagem subjacente aos desenvolvedores expressarem os seus pontos de vista do sistema em termos de eliminação de comunicação entre clientes e conceitos do modelo irá evoluir em um idioma onipresente. A equipe de empreiteiros ou até mesmo entre os desenvolvedores dentro de equipes de desenvolvimento
de software artefatos. compreender se irá manifestar no outro é a eliminação de não-criativa e repetitiva de código fonte do sistema na medida em que representa o modelo do trabalho feito pelos desenvolvedores automatizando tarefas repetitivas do sistema (através do DSL). Qualquer alteração no processo de desenvolvimento do modelo mudará.
O modelo e estas alterações são claramente visível a todos os participantes do projecto, tanto especialistas em negócios e desenvolvedores [9]. A. combater aula DDD é um processo contínuo de expressar onipresente em cada domínio de projeto de software existe um número de idiomas diferentes no código [10]. As partes interessadas que precisam de comunicar os seus pontos de vista e ideias e a implementação de recursos-chave da DDD usando conceitos orientados a objetos entre si. Devido às diferentes origens desenho pode ser usado para criar uma plataforma unificada para cenários de negócios (ou formações de engenharia), bem como o desenvolvimento e a evolução de sistemas complexos de software. Um diferentes perspectivas do projecto por vezes esta ferramenta é a plataforma de DSL que iremos descrever no resto da comunicação pode ser mal interpretado. Devido ao alto volume de esta seção. as interacções entre os diferentes grupos de partes interessadas plataforma DSL é um serviço que ajuda no processo de desenvolvimento de projeto, criação pode interpretar as necessidades do cliente e a manutenção de aplicativos de negócios. Ela permite a terminar com um produto que não satisfaz a automação dos contratantes do processo de desenvolvimento de aplicativos de negócios. As expectativas. É por esta razão que a plataforma DSL usa uma plataforma específica utiliza o modelo de negócios específico como entrada e saídas idioma dedicado à descrição de problema de negócio domínios.
componentes acabados para o software de negócios correspondente Tendo em um modelo discutido e representado usando o sistema unificado. Desde a plataforma DSL chama sobre os pontos fortes da linguagem com o Unified significados e compreensão da abordagem DDD, modelo de negócios é descrito em compreensível conceitos, a comunicação entre a equipe é significativamente melhorada, língua tanto para os especialistas em negócios e equipe de desenvolvimento resultando em um software que atende a necessidade do utilizador melhor.
Enquanto esta descrição é igualmente uma especificação formal da documentação que é gerado desta forma melhor especifica sistema (Figura 2). O projeto de software, promove o consenso entre a equipe uma vez especificação declarativa é definida, qualquer dos membros e tem maior qualidade global. Plataforma DSL tem apoiado os compiladores pode usar esta especificação para construir o código ou a documentação ainda um passo mais longe, desde a






própria documentação representa um completo sistema formal principalmente custo fixo para o fornecedor de software. De acordo com as especificações de produção que podem ser facilmente utilizados para rápida protótipo de cada unidade adicional não aumentar significativamente a validação do sistema. custo total. A este respeito o potencial reprodutibilidade entregar para activos de software também melhora significativamente o seu B. Melhorar a eficiência do código fonte e valor de automação. A especificação formal do sistema de negócios pode ser usado juntamente com este dispõe de activos de software pode aproveitar como uma base sólida para melhoria da geração de código e de economia de diferentes fenômenos que também pode influenciar a manipulação. Compilador dedicado de plataforma DSL pode usar estimativa do seu valor. Vamos mencionar apenas alguns exemplos. Esta descrição formal de especificações funcionais para criar o efeito de rede que o uso do produto final ou serviços de qualquer dos componentes para o software de negócios finalizados podem produzir no segmento de mercado visado pode criar lock-no sistema. Essas bibliotecas podem ser orientados para um determinado efeito promover a lealdade do cliente e base de clientes stabile. linguagem de programação ou um quadro ou banco de artefatos para toda a base de clientes o mais valioso ativo de software qualquer ou relacional da base de dados orientada a objeto System.Durante o torna-se de acordo com a Lei de Metcalf. Consequentemente a criação de valor do software artefatos, devido a especificações formais, de produto do cliente e serviços que são baseados em que melhorias adicionais de código pode ser automatizada a criação de ativo de software aumenta proporcionalmente. Distribuição de mais rápido e mais dependentes do sistema de execução de tarefas bem como software usando os serviços de Internet corresponsive reduz ou até mesmo criando mais sustentáveis o código fonte para o projeto. Finalmente desenraiza os custos de inventário e logística. Serviços de Internet um número de tarefas de administração e manutenção de banco de dados também pode transformar produtos de software em serviços. Muitos podem ser realizadas usando o modelo DDD e implementar aplicativos de desktop agora estão disponíveis como serviços online por simplesmente migrar as mudanças em uma base de dados específica (SaaS) que permitem mais eficazes estratégias de preços através do sistema de preços. discriminação.
Todos os recursos acima dos ativos de software devem ser tomadas III. Estimativa do valor do software em conta durante a estimativa do valor do software.
Nesta seção discutimos a exigência e motivação atualmente, estimativa de valor do software na prática é baseado em software para estimativa precisa do valor e descrever um dos três abordagens possíveis [15]: (1) baseados nos custos; (2) A procura- conceitos inovadores para estrategicamente a determinação do valor de andamento ou baseada em valor e (3) orientado para a concorrência.
activos de software. A abordagem baseada nos custos é amplamente utilizado como ele é coberto pela na gestão estratégica de uma das mais importante base para a Norma Internacional de Contabilidade 38 - Activos Intangíveis a tomada de decisão é a avaliação do valor económico activos. (IAS 38). Principal objectivo da IAS é padronizar ainda mais importância financeira para a tomada de decisão adequada é a relatórios para todos os países que aceitam a norma a fim de precisão na avaliação do valor económico de activos intangíveis apresentarem as suas demonstrações financeiras comparáveis, a contabilidade básica como o seu valor pode ser mais difícil de avaliar de forma realista. princípios são adoptadas. Para medida de ativo isso significa que na indústria de software este é o caso com activos de software. há uma preferência para subestimar o valor de ativo em vez da maioria dos ativos são sistemas de software desenvolvidos internamente a superestimá-la. É por esta razão que a maioria das estimativas de valores que são utilizados para a oferta de serviços no cliente são mercados com base no valor histórico que geralmente é inferior ou para vender o próprio software no cliente mercado. valor atual ou valor de mercado, especialmente para activos intangíveis.
Software como um activo tem algumas das propriedades que o software do computador é tratado como um activo intangível como é uma diferenciação a partir de qualquer outro activo, tangíveis ou não [11]: activo não monetário, sem substância física e 1) Indestrutibilidade. Usando o software ao longo do tempo não degradar identificáveis. Norma define que o seu valor é inicialmente a sua qualidade não obstante o comprimento de utilização ou número de medida com custo, subsequentemente mensurados a custo ou usando usa. Por conseguinte esta propriedade reforça o modelo de revalorização interno. Ela também leva em conta a futura qualidade económica de ativo de software e sua durabilidade, de modo a que os benefícios que o activo pode ceder. Embora esses benefícios alteração no seu valor é exclusivamente determinada por factores externos. Podem influenciar significativamente o valor dos activos de software que a este respeito o valor do software podem se deteriorar com o tempo geralmente são ignorados na prática, de modo a que durante a [13], especialmente com a estimativa de avanços tecnológicos que apenas os custos de produção de ativos de software é tomado em alterar o ambiente de trabalho do software. conta. Mesmo que o custo de produção não se traduz necessariamente Transmutability 2). Personalização, personalização, em software valor, uma vez que durante o desenvolvimento da modificação de software e outras práticas de alterar um número existente de funcionalidades de software podem ser desenvolvidos sistemas de software que são facilmente alcançados que resulta em custo- nunca fazer no produto final [2], ou aumento no projeto produção efectiva de variantes de software. Este é directamente os custos que não aumentar o valor do software a ser particularmente importante para a segmentação de clientes e de preços desenvolvida (isto é caro despesas gerais, alojamento e discriminação dirigidas estratégias de mercado [12]. Os custos de deslocação para os membros da equipe, etc). Má gestão de projecto 3) A reprodutibilidade. Desde cópias de elevada qualidade do original práticas não são tomados em consideração durante a actual estimativa de software pode ser produzido a baixo custo podem autores concordam com abordagens bem como o nível de qualidade de ativos de software. Tudo o que o custo marginal da produção é quase zero [14]. Estes elementos podem levar à superestimação dos ativos de software estrutura do custo de produção para produtos de software contém o






que por sua vez é contrária aos princípios contabilísticos.
Valor contabilístico utilizado para a elaboração de relatórios financeiros, por conseguinte, não reflecte o verdadeiro potencial dos ativos de software, honrar as propriedades específicas que temos descrito anteriormente, para efeitos de tomada de decisão estratégica. Usando o valor contabilístico será quer subestimar ou superestimar a capitalização no balanço ou inevitavelmente deturpar a devida diligência antes de possíveis aquisições. A tomada de decisão estratégica requer melhor estimativa do potencial de ativos de software que leva em conta as propriedades específicas e potenciais activos de software oferecem.
É por esta razão que novas abordagens são desenvolvidos a fim de fazer a estimativa do valor do software mais confiável. No restante desta seção vamos apresentar um modelo de estimativa com base na noção de dívida técnica e interesse como descrito por Groot et al .
A. Avaliação baseada no software da dívida Técnica e interesse técnico dívida técnica é um tipo de custo de oportunidade definida como um conjunto de questões ou problemas de qualidade no software que irá custar à organização que possui o software mais extensões se eles não estiverem resolvidos [16]. Além disso, existem dois principais componentes da dívida técnica [18]:
1) princípio como custo para reparar um sistema de software a fim de atingir o nível ideal de qualidade e 2) Juros, como custo adicional na manutenção devido à falta de qualidade.
Dívida técnica aumenta ao longo do tempo se as questões de qualidade de software não são resolvidos devido a custos de manutenção que aumentam como esforço adicional para negociar questões de qualidade é chamado para [17]. De acordo com a economia financeira princípio da dívida técnica é um custo que aumenta ao longo do tempo pela taxa de juro (Figura 3).

Fig. 3 Estrutura da técnica da dívida ao longo do tempo

devido a este aumento de técnicos da dívida ao longo do tempo, é viável para pagar o custo inicial para reparar o sistema de software e trazê-lo para o nível ideal de qualidade. A este nível menor custo de manutenção são necessários para o funcionamento do sistema no futuro. Na Figura 4 podemos ver que os benefícios futuros a partir do software de operação do sistema no nível ideal de qualidade gerando poupanças significativas.
A fim de incluir a dívida técnica na estimativa da

Fig. 4
beneficia de manutenção do software do sistema no nível ideal de
software de qualidade o valor [2] tenham proposto um modelo de Pirâmide de avaliação de software de camadas. Este modelo depende de SIG modelo de manutenção (SIG) para determinar o nível de desenvolvimento de software e concluir o nível ideal de qualidade do software. Na parte superior do nível de desenvolvimento estima que propor métricas que ajudar a estimar os custos operacionais dos sistemas de software desenvolvidos com três principais medidas: o esforço de reconstrução, reparar o esforço e esforço de manutenção (Figura 5).

Fig. 5 Software Pirâmide de avaliação (Groot et al, 2012)
reconstruir esforço (RbE) é definido como a tecnologia neutra medida de volume técnica, baseada na tecnologia utilizada e o volume de linhas de código fonte produzido (SLOC). Esforço de reparação (RpE) é igual à dívida técnica do sistema de software que é principalmente determinado pela qualidade do processo de desenvolvimento de software. Isto significa que apenas uma parte do sistema de software precisa ser reconstruída e esta parte é referida como a fração de retrabalho (RF). Esforço de manutenção (ME) é o esforço anual estimada necessária para a manutenção regular do sistema, incluindo correções de bugs e pequenas melhorias.
Com base no acima de métricas definidas [2] árvore de propor modelos diferentes de estimar o valor de ativos de software.
B. Os modelos de estimativa de Ativos de Software Para a finalidade do presente documento iremos considerar três modelos de estimativa do valor da produção dos activos de software que serão bases de analisar o impacto da abordagem DDD para desenvolvimento de ativos de software. Todos os modelos são baseados nos pressupostos de que (1) existe um nível de qualidade de ativos de software com base em métricas de SIC descrita anteriormente e (2) existe





um nível ideal de qualidade para o software asset na mão que é maior do que o actual nível de qualidade como anteriores estudos empíricos sugeridas. Mesmo se o nível ideal de qualidade é inferior ao actual nível de qualidade destes modelos de estimativas de valor podem ser aplicáveis.
Primeiro modelo é baseado no esforço de reparação (RBE). De acordo com este modelo valor estimado V é igual ao esforço de reconstrução com desconto pelo esforço de reparação (RpE) necessário para trazer a qualidade de ativo de software a nível ideal.
Segundo modelo é baseado na fração de retrabalho (RF). Se o sistema de software trazendo nível ideal requer a substituição completa da componente ou conjunto de componentes que o valor estimado do sistema V é igual ao valor da parte do sistema que não exigem quaisquer melhorias (ou seja
o valor da fracção que não deveriam ser alteradas).
O terceiro modelo é baseado no interesse técnico. Aqui reconstruir valor (VD) é descontado pelo valor de interesse técnico durante a vida útil de trabalho do sistema de software Interesse técnico é o aumento do custo de manutenção que ocorre se o sistema estiver funcionando no seu actual nível de qualidade. O montante do custo de manutenção adicional é dada na figura 4 como a linha pontilhada, representando o possível aumento de valor presente do sistema de software se fosse atualizada para seu nível ideal de qualidade antes da sua introdução na fase de produção.
Para obter mais detalhes consulte o papel [2].
Iv Análise DAS PRÁTICAS DE GERENCIAMENTO DE SOFTWARE E DESIGN orientado para o domínio
A. Relativas a estimativa do valor de Ativos de Software e a abordagem de desenvolvimento de software como podemos ver na proposta de modelos de estimativa do valor dos ativos de software, todos eles dependem fortemente os custos que a exploração dos ativos de software incorre. Por conseguinte, podemos inferir que os ativos de software que não são utilizados tendem a perder o seu valor, uma vez que não existem custos de manutenção excepto custos de armazenamento. O valor desses activos diminui até que atinja o valor de aquisição tal como definido na IAS 38.
Para ativos de software que são activados e operacional no sistema de produção, a estimativa do seu valor pode ser executada usando os modelos descritos. O principal determinante do nível de estimativa será relacionada com a qualidade da abordagem de desenvolvimento de software. Isso é inevitável que o esforço de reconstrução (RbE) assenta não só no volume do sistema (i.e. SLOC) mas também as características da tecnologia utilizada. A medida de carácter tecnológico inclui as propriedades dos ambientes de desenvolvimento de software, linguagens de programação e práticas, bem como os princípios de gestão de projecto e software de abordagens que resulta em nível correspondente de qualidade do software.
Por outro lado o esforço de reparação (RpE) leva em conta os custos de manutenção que dependem fortemente a abordagem software 12,11 ciclo de vida de desenvolvimento de software (SDLC).
Todos os três modelos beneficiar da abordagem eficiente de software como o valor estimado do ativo de software aumenta. Se o software abordagem permite maior coeficiente tecnológico

a final RbV será maior que resulta em estimativas de valor mais elevado.
No primeiro modelo abaixando a reparação estimativa de esforço também aumenta o valor da estimativa de valor. Uma vez que a RpE é igual à dívida técnica podemos ver que a abordagem de software mais eficiente como DDD resulta em aumento de estimativas de valor de ativo de software.
No segundo modelo reduzindo o retrabalho de ejeção aumentou o valor de Rf estimativa. Isto significa que se o código fonte mais otimizada é utilizada parte menor de que terá de ser alterada a fim de aumentar a sua qualidade.
Por último, no terceiro modelo é ainda sugerido que se mais eficiente a adopção de uma abordagem de desenvolvimento de software em fases posteriores do ciclo de vida de desenvolvimento de software (SDLC) pode melhorar parcialmente o valor do software de sistema, como interesse técnico será descontado o valor de reconstrução RV a uma taxa inferior.
Todos os modelos descritos podem ser aplicados a sistemas complexos de software que são compostas de vários quadros de desenvolvimento, programação de paradigmas e línguas, quadros de banco de dados e tecnologias. Interconexão de este tipo de sistemas complexos gera desenvolvimento adicionais substanciais e custos de manutenção.
Se estas ligações pode ser negociado a partir de um único conceito de programação centralizada representado por um modelo unificado de todo o sistema o esforço necessário para manter o sistema diminuiria. É por este motivo que a abordagem para o complexo sistema de software usando design orientado para o domínio pode influenciar eficazmente o valor de sistemas complexos e de ativos de software. Esta influência pode ser observada durante os estágios iniciais de desenvolvimento, mas também durante fases posteriores ou seja
durante a fase de produção e a manutenção do sistema.
Como descrito anteriormente, a DDD é Focalização na descrição do domínio. Para sistemas complexos (tais como os sistemas de software de negócios) isto significa que apenas os processos de negócio têm de ser descritos sem a preocupação com os detalhes técnicos.
Os especialistas em negócios podem comunicar a sua compreensão de processos de negócios para as equipes de desenvolvimento de sistema utilizando uma linguagem ubíqua que também unificada representa a especificações formais do sistema. No final, modelo representa o domínio comercial no lado, não tendo em conta que parte do sistema complexo que se refere a (nomeadamente as funcionalidades, sistemas externos e fontes de dados ou bancos de dados).
Outras ferramentas que desenhar na abordagem DDD pode usar este procedimento formal de descrições e usando compiladores dedicados a determinadas propriedades do modelo de criar os componentes do sistema de uma forma flexível e ainda forma automatizada, produzindo otimizado e código fonte sustentável resultante com o aumento da qualidade do software.
Particularmente, ferramenta Plataforma DSL contém um número de compiladores que traduzir o código fonte do modelo DDD em diferentes segmentos do acoplado a sistemas de software complexos e heterogêneos, na parte superior do prédio vários quadros, línguas, bibliotecas e plataformas. Desta forma Ele sincroniza os sistemas completos e migra dados entre banco de dados e o modelo e vice-versa. A carga de trabalho da equipe de desenvolvimento





está aliviado por forma a que os membros da equipe podem gastar mais tempo em projetar o próprio modelo de domínio em cooperação com especialistas de negócios.
A desvantagem da introdução de DDD no desenvolvimento de software é o esforço adicional necessário para adoptar esta abordagem de desenvolvimento de software. Como o software de sistema se expande a um software alternativo abordagens de desenvolvimento que geralmente tendem a aumentar o custo de manutenção e diminui a qualidade do código e o sistema degrada gradualmente. Com o crescimento do sistema de software DDD estabelece um melhor gerenciamento da complexidade do sistema com pouca degradação de qualidade do sistema tornando custo de entrada inicial viável. Também, esforços adicionais e é necessário tempo para criar um modelo de substanciais no domínio comercial antes de efeitos positivos sobre o processo de desenvolvimento se tornam aparentes.
Benefícios de se mover o foco da equipe de desenvolvimento forma problemas técnicos para a lógica de negócios bem como a melhoria da comunicação entre os membros da equipe melhora a qualidade dos sistemas de software desenvolvidos.
Economia adicional obtido através do menor custo de manutenção e maior qualidade do código fonte através de um melhor desempenho de execução e melhoria do gerenciamento de código pode melhorar significativamente o valor de sistemas de software de negócios complexos. No entanto, DDD não parecem ser amplamente difundido e aceito na prática.
B. investigando DDD Adopção limitações práticas na gestão do Software a fim de verificar os achados deste papel, várias entrevistas foram conduzidas com vários membros da equipe a partir de duas empresas de desenvolvimento de software e duas instituições financeiras que desenvolvam as suas próprias soluções de software. Com base nas respostas recolhidas durante as entrevistas análise SWOT foi conduzido. Os resultados são apresentados na Figura 6.
Matriz SWOT vantagens desvantagens DOMINA WEAKNESESS  melhor comunicação entre a equipa  elevados custos de acesso  foco na lógica de negócios custo  ineficiência para automação de particular simples  desenvolvimento e manutenção de sistemas de software de gestão de topo  resistência tarefas internas  elevado nível de isolamento e encapsulamento  Unified modelo de domínio no domínio  maior nível de modelo de qualidade podem apresentar um aumento de valor do software  desafio para especialistas em domínio de negócios
OPPORUNITIES AMEAÇAS  melhorado estimativa do valor  incentivo para manter o legado para os activos de software desenvolvido tecnologias e redução de  linguagens de programação de manutenção enquanto os custos durante a fase de produção de software externo mantendo o alto valor do sistema de software  vida útil prolongada do software  como mudanças no modelo de domínio são os sistemas Reflectidas no sistema  sustentação lógica de negócios de componentes risco de sistemas legados humanos erro aumenta

Fig. 6 análise SWOT da DDD abordagem para sistemas de software de negócios complexos

as vantagens foram celebrados com base nas evidências descritas neste papel enquanto as desvantagens necessária nova

avaliação e coleta de dados obtidos por meio de entrevistas.
As entrevistas foram amplamente utilizado para identificar os pontos fracos e as ameaças de adopção abordagem DDD para o desenvolvimento e a manutenção de sistemas complexos de negócios.
Como se pode ver na Figura 6 pontos fortes consulte core vantagens de DDD com grande ênfase em questões de gestão de software de gestão de negócio e especialmente os aspectos do gerenciamento de software, tais como foco na lógica de negócios, unificando o domínio comercial para todos os membros da equipe independentemente da sua justificativa e benefícios em qualidade de software e, particularmente importante para o desenvolvimento in-house, aumentou o valor de ativos de software.
Por outro lado as fraquezas da adopção DDD pertencem ao custo inicial de adoptar esta abordagem bem como o risco de sobrestimar a complexidade do sistema final que a DDD é altamente custo ineficiente para o sistema de software simples.
A fraqueza mais importante é o estado atual de gerenciamento superior de consciência que representam a principal limitação para uma adoção mais ampla desta abordagem. Prestações mais elevadas pode ser alcançado em grande escala não as empresas de software que desenvolvem soluções de software in-house, tais como instituições financeiras e bancos, onde o foco do core business não está no desenvolvimento de software. Estas são também as empresas onde a sensibilização e a compreensão dos potenciais benefícios parece ser a um nível comparativamente baixo bem como a prioridade em abordagens de gestão de desenvolvimento de software. O principal obstáculo que impede a maior aceitação do design orientado para o domínio na prática é a falta de compreensão dos benefícios da DDD e potenciais ferramentas fornece pelo gerenciamento de nível superior. Como a linha de fundo na gestão de riscos é para evitar riscos potenciais, ajustes adicionais de estimativas de valor de sistemas de software não justificar a adopção da DDD em empresas que foram entrevistados. Além disso, a adoção bem sucedida exige que as empresas especialistas em domínio para ajustar para o domínio idioma específico que é caracterizada por um elevado nível de isolamento e encapsulamento que seja mais familiar aos especialistas de software.
Elementos externos da análise SWOT descrever os potenciais de adopção DDD onde potenciais positivos representam oportunidades para ser adquirida. Como se pode ver na Figura 6 melhorado avaliações de activos de software pode ser alcançado e promover uma melhor tomada de decisão estratégica. Além disso, a redução de custos de manutenção durante a fase de produção melhora a taxa interna de retorno sobre o investimento ao mesmo tempo em que o prolongamento da vida útil do ativo de software. Igualmente importante é o potencial de preservar a lógica de negócios em sistemas herdados que seria perdido após a descontinuação dos sistemas legados ou mantidas através de dispendioso processo de reengenharia.
Vida útil prolongada pode igualmente conduzir a uma das duas mais importantes ameaças na adopção DDD. Este é o incentivo para manter os sistemas herdados que dependem de tecnologias antigas, programação línguas, quadros de paradigmas ou ao mesmo tempo em que mantém o alto valor de ativos de software que pode expor a empresa a riscos adicionais tais como auto-exclusão de tendências na evolução de software e aumento de ineficiência resultando





em perda de vantagens competitivas. Ameaça adicional que possa (Http://dsl-platform.com) para efeitos de avaliação e ser detectado é o possível aumento da importância de informações valiosas que melhoraram a qualidade dos fatores de erro humano desde o modelo de software está diretamente relacionado com os resultados da pesquisa apresentados neste papel.
para o próprio sistema, de maneira que qualquer mudança é facilmente implementado em componentes de software na fase de produção. Referências
[1] N. Mavetra e J. Kroeze, " Princípios orientadores para o desenvolvimento de
produtos de software adaptativo V. CONCLUSÃO" nas comunicações de IBIMA, vol 2010, IBIMA edição, 2010, p. 1 - 15. Neste documento que apresentámos um dos mais recentes [2] J. De Groot, A. Nugroho, T. volta e J. Visser, "Qual é o valor de
abordagens para o desenvolvimento de software chamado de domínio conduzido seu software?" no processo do Terceiro Seminário Internacional sobre
design (DDD). Avaliamos as suas implicações no software de
gestão da dívida técnica th (MTD), 5 de Junho de 2012, Zurich: IEEE, 2012, págs. 37-44. através do processo de gerenciamento de impacto sobre o valor do software [3] N. R. Jennings, "no Agent - Engenharia de Software baseado em
estimativa artificial" e alterações na eficiência de manutenção. Como essa inteligência, vol 117,Elsevier Science, B.V., 2000, págs. 277 - 296.
abordagem é ainda a ver a sua adoção mais ampla na prática temos primeiro [4] D. Sharma, W. Ma, D. Tran e M. Anderson, "uma nova abordagem à programação: Software baseado em agente Engenharia" baseados em Knowslege demos uma olhada em suas principais características e, com base nos actuais sistemas de engenharia e de informações inteligentes, palestra Notas em investigação, posicione-o de acordo com as classificações recentes. Pela Ciência da Computação, vol 4253, Berlim: Springer Verlag, 2006, págs 1184
comparação com outras abordagens estamos classificados DDD para um - 1191.
[5] D. Norte, " Modificação do comportamento: a evolução do comportamento do grupo intermediário acionado entre abordagens estruturadas e desenvolvimento", no melhor Software, vol-problema 2006-03, Techwell Corp. abordagens comportamental. Na verdade, DDD parece ter sido o [6] R. Brown, S. Nerur e C. Slinkman, " o pensamento filosófico em turnos
elo ausente desde o intermediário classe apenas reconhecido um Desenvolvimento de Software" no processo na décima conferência das Américas sobre os sistemas de informação, Nova Iorque, Agosto 2004, p. 4136 classe de metodologias baseadas em desenvolvimento de software ágil - 4143. em causa com os pequenos e médios projectos. DDD completa [7] E. Evans, Design Domain-Driven: abordar a complexidade no coração da
classificação como é destinado para software complexos e heterogêneos, editora Addison-Wesley, 2004.
sistemas de software. [8] G. Booch, J. Rumbaugh e I. Jacobson, o Guia do Usuário do Unified Modeling Language, 2ª Ed., editora Addison-Wesley, 2005. Para efeitos do presente documento levou dois benefícios principais [9] J. S. Cuadrado e J. G. Molina, "Construir o domínio
de línguas específicas -DDD descrevendo suas implementações práticas através de desenvolvimento Model-Driven" no IEEE Software vol 24, edição nº 5.
Uma ferramenta existente plataforma DSL. Estimamos o impacto da IEEE Computer Society, Setembro/Outubro 2007, págs. 48 - 55.
[10] R. J. Wirfs-Brock, "Impulsionado para... Descobrir o seu design valores" em esses recursos sobre duas questões importantes no gerenciamento de software - Software IEEE, vol 24, edição nº 1. IEEE Computer Society, estimativa de valor do software e manutenção da eficácia de custos. De janeiro/fevereiro de 2007, p. 9 - 11.
Temos demonstrado que o nível de qualidade de software pode ser grandemente [11] S. Y. Choi, D. O. Stahl e A. B. Whinston, a economia do comércio electrónico: o imperativo de fazer negócios no melhorado durante a fase de desenvolvimento através de uma melhor marketplace. Indianápolis: Macmillan, 1997. Comunicação e movendo o foco da técnica a empresa [12] S. Lehmann e P. Buxmann, "Estratégias de preços dos fornecedores de software"
arena. Durante a fase de produção do sistema de software maior no Business &amp; Engenharia de Sistemas de Informação, vol 6, Heidelsberg:
qualidade do código otimiza o custo de manutenção em comparação com Springer Verlag, 2009, págs. 452 - 462.
[13] J. Zhang e A. Seidmann, " a melhor política de licenciamento de software software do sistema de qualidade. subótima Tudo isso se reflete no âmbito qualidade incerteza", nos trabalhos das 5 internacional
por meio de valor de ativos de software. Temos demonstrado com base na conferência sobre o comércio electrónico, Nova Iorque: ACM Press, 2003, págs.
software modelos de avaliação apresentado pela Groot et al (2012) 276-286.
[14] S. Royer, Gestão Estratégica e venda on-line: Criando como as alterações DDD fornece um impacto sobre todos os três vantagem competitiva com bens intangíveis web, Nova Iorque: Routlege, propôs modelos de avaliação de software. 2005.
Finalmente realizamos entrevistas com informações [15] C. Homburg e H. Krohmer, Marketing Managment: Estratégia - Instrumentos - Execução - Governação, 2ª Ed. (em alemão), oficiais e gestores em empresas de software e bancos de Wiesbaden: Gebler, 2006. obter dados e criar uma análise SWOT da adopção de DDD no [16] W. Cunningham, "o sistema de gestão de portefólio WyCash", ACM
empresas que gerenciar em casa complexos e heterogêneos SIGPLAN OOPS Messenger, vol 4, n˚ 2, 1993, págs. 29-30.
[17] A. Nugroho, J. Visser e T. Kuipers, "um modelo empírico de técnicos activos de software. A análise mostrou que a principal obstáculo para nd a dívida e os juros," no processo do 2 Seminário Internacional sobre a adopção da DDD é a falta de compreensão da gestão económica da dívida técnica., ACM, 2011, págs. 1-8.
Benefícios pela gestão de topo. [18] B. Curtis, J. Sappidi e A. Szynkarski, "estimar o tamanho, custo e
esta é uma importante confirmação de limitação de corrente para tipos de dívida Técnica", nos trabalhos do Seminário Internacional sobre Gestão da Dívida Técnica, 2012, Zurique, Suíça. adopção de DDD no software mainstream da indústria e serviços de software de grandes empresas que devem ser tidos em conta aquando da comunicação de informações de investigação para os usuários de negócios e de gestão.
Aviso
gostaria de agradecer Rikard Pavelic e empresa Nova Generacija Softvera d.o.o. pela sua cooperação durante a investigação deste tema Doação de livre acesso à plataforma DSL





